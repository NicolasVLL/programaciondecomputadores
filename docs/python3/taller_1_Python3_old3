**Parte 1: 18 ejercicios**
Del libro Marzal-Gracia-García:
Capítulo 4: Estructuras de Control
67: realizar este ejercicio sin utilizar ciclos
72
78 Prohibido usar la función max() de Python, o alguna similar.
82
105
117: realizar este ejercicio utilizando ciclos
124
130

Del libro Trejos:
Capítulo 7: Decisiones
14: Leer dos números enteros de dos dígitos y determinar a cuánto es igual la suma de todos los dígitos.
19: Leer tres números enteros y determinar cuál es el mayor. Usar solamente dos variables. OJO: solo dos variables en todo el programa.
24: Leer un número entero y determinar cuántos dígitos pares tiene.
29: Leer un número entero de cinco dígitos y determinar si es un número capicúo. Ej. 15651, 59895
39: Leer tres números enteros (de un número de dígitos indeterminado) y determinar si el penúltimo dígito de los tres números es igual. Tengamos en cuenta que para el número 23 el primer dígito es el 2. Y para el número 543 es el 5.
44: Leer un número entero y determinar si el primer dígito es múltiplo de alguno de los otros dígitos. Tengamos en cuenta que para el número 23 el primer dígito es el 2. Y para el número 543 es el 5.

Capítulo 8: Ciclos
9: Mostrar en pantalla todos los números terminados en 6 comprendidos entre 25 y 205 
24: Leer un número entero y determinar a cuánto es igual al suma de sus dígitos pares. Tengamos en cuenta que para el número 23 el primer dígito es el 2. Y para el número 543 es el 5.
29: Leer un número entero y determinar a cuánto es igual el primero de sus dígitos. Tengamos en cuenta que para el número 23 el primer dígito es el 2. Y para el número 543 es el 5.
49: Utilizando ciclos anidados generar las siguientes ternas de números
1 1 1
2 1 2
3 1 3
4 2 1
5 2 2
6 2 3
7 3 1
8 3 2
9 3 3

**Parte 2: 21 ejercicios**
**Del libro Trejos:**
En los siguientes ejercicios considerar lo siguiente:
* En L=[1,5,5,5,3,4], se debe decir que el 5 aparece 3 veces o que el 5 está repetido 2 veces.

Capitulo 9 - Vectores
9. Leer 10 números enteros, almacenarlos en un vector y determinar cuántas veces está repetido el mayor. 
14. Leer 10 números enteros, almacenarlos en un vector y determinar cuántas veces aparece el promedio entero de los datos dentro del vector.

24. Leer 10 números enteros, almacenarlos en un vector y determinar en qué posición está el número con mas dígitos. En caso que existan varios máximos, reportarlos todos. Por ejemplo: 
Entre el número entero 1 = 32
Entre el número entero 2 = 3435
Entre el número entero 3 = 132
Entre el número entero 4 = 4233342

El entero con más  dígitos que usted entró es el 4233342 y se encuentra en la posición 4.

34. Leer 10 números enteros, almacenarlos en un vector y determinar cuántas veces en el vector se encuentra el dígito 2. No se olvide que el dígito 2 puede estar varias veces en un mismo número. Por ejemplo, en la lista [127, 745, 0, -67, -547, 5421, -77, -983, 54,12] hay 6 dígitos 7.
39. Leer 10 números enteros, almacenarlos en un vector y determinar si la semisuma entre el valor mayor y el valor menor es un número par.
44. Leer 10 números enteros, almacenarlos en un vector y determinar cuántos de los números almacenados en dicho vector pertenecen a los 100 primeros elementos de la serie de Fibonacci.
48. Leer 10 números enteros, almacenarlos en un vector y determinar en qué posición se encuentra el número primo con mayor cantidad de dígitos pares.

Capítulo 10 - Matrices
9. Leer una matriz 3x4 entera y determinar cuántos de los números almacenados son primos y terminan en 3.
24. Leer dos matrices 4x5 enteras y determinar si el mayor número primo de una de las matrices también se encuentra en la otra matriz.
29. Leer una matriz 4x6 entera y determinar si alguno de sus números está repetido al menos 3 veces.
44. Leer dos matrices 5x5 enteras y determinar si el promedio entero de los números terminados en 4 de una matriz se encuentra al menos 3 veces en la otra matriz.
49. Leer una matriz 3x3 entera y determinar si el promedio de todos los datos almacenados en ella se encuentra también almacenado.

Capítulo 11 - Funciones
4. Construir una función que reciba como parámetro un entero y retorne la cantidad de dígitos pares.
34. Haga un programa que solicite una cadena al usuario y determine en ella la palabra más larga y la palabra más corta que se ha ingresado, sin utilizar ninguno de los métodos de cadenas o similares que vienen con el Python. Unicamente se puede utilizar los operadores de comparación y de indexación y la función len() para realizar este programa. Por ejemplo en: "         María       tenía un             corderito   llamado        Pepe   " la palabra más corta es "un" y la palabra más larga es "corderito".
43. Construir una función que reciba como parámetro una matriz de tamaño mxn entera y retorne la cantidad de números primos almacenados en la matriz.
49. Construir una función que reciba una matriz 5x5 y retorne el valor de su moda. La moda de un conjunto de datos es el dato que mas se repite.

**Del libro Marzal-Gracia-García:**
158 Diseña un programa que lea una cadena y un número entero N y nos diga cuántas palabras tienen una longitud de N caracteres. Tenga en cuenta que por ejemplo en "María, quien tiene 12 hermanos, trabaja en Manizales.", el 12 no se considera una palabra y que los signos de puntuación no cuentan para determinar la longitud de la palabra; por lo que María tiene 5 letras (no seis si se incluye la coma).
165 Diseña un programa que muestre la cantidad de números que aparecen en una cadena leída de teclado. ¡Ojo! Con número no queremos decir dígito, sino número propiamente dicho, es decir, secuencia de dígitos. La cadena "un 1, un 201 y 2 unos", por ejemplo, tiene 3 números: el 1, el 201 y el 2. Considere únicamente números enteros.
167. Diseña un programa que indique si una cadena introducida por el usuario está bien formada como identificador de variable. Si lo está, mostrará el texto «Identificador válido» y si no, «Identificador inválido». Prohibido usar el método str.isidentifier().
200. Diseña un programa que lea dos cadenas y devuelva el prefijo común más largo de ambas. (Ejemplo: las cadenas "policía" y "polinización" tienen como prefijo común más largo a la cadena "poli").
300 Diseña una función que reciba una lista de palabras (cadenas) y devuelva, simultáneamente, la primera y la última palabra según el orden alfabético. NOTA: prohibido usar la función sort(), sorted() u otra similar de PYTHON. 

----
**Parte 3: 15 ejercicios**
Nota: para la impresión de tablas, utilizar el comando print() y sus modificadores % o .format() -- ver diapositivas "09 - Entrada y salida en Python 3". No usar PANDAS y otra librería para la impresión de tablas.

prob_01.py:
Determinar si el password solicitado por su programa es seguro. Lo es si cumple los siguientes requisitos:
Debe tener:
a) entre 6 y 12 caracteres (incluido)
b) al menos una letra minúscula [a, b, ..., z]
c) al menos una letra mayúscula [A, B, ..., Z]
d) al menos un número [0, 1, ..., 9]
e) al menos un caracter de [#$%&/?@*]
NOTA: observe que dice "AL MENOS" por lo que si se tienen otros caracteres como el espacio o letras como la Ñ, sería válido.

prob_02.py: 
Escriba un programa que pregunte el nombre, la edad y el puntaje de 10 personas. Imprima la tabla con la información de las personas de modo que estén ordenadas de forma ascendente así:
a) primero ordene por nombre
b) si los nombres son iguales, ordene por edad
c) si adicionalmente las edades son iguales, ordene por el puntaje.
Por ejemplo la tabla siguiente, cumple las condiciones de ordenamiento anteriormente descritas:
[[code]]
NOMBRE  EDAD  PUNTAJE
Jairo    19     98
Jairo    21     18
Jairo    21     99
Juan     18     80
Pedro    17     86
[[code]]
Nota: El puntaje será un número entero entre 0 y 100. La edad es un número entero no negativo.
Nota: para no complicar la cosa, con un solo nombre basta... no hay que utilizar nombres compuestos/apellidos
Nota: para la impresión de tablas, utilizar el comando print() y sus modificadores % o .format() -- ver diapositivas "09 - Entrada y salida en Python 3". No usar PANDAS y otra librería para la impresión de tablas.
Nota: la tabla la podría ingresar así:
Entre el número de personas = 10

Entre el nombre de la persona 1: JAIRO
Entre la edad de la persona 1: 19
Entre el puntaje de la persona 1: 98

Entre el nombre de la persona 2: jairo
Entre la edad de la persona 2: 21

etc ...

Observe que el programa organizó el nombre y puso la primera en mayúscula y el resto de letras en minúsculas. Esto se puede organizar con str.title()

prob_03.py:
Un robot se mueve en el plano cartesiano empezando del punto (0,0). El robot se puede mover hacia ARRIBA, DERECHA, ABAJO, IZQUIERDA. Suponga que el usuario entró el registro de movimientos del robot así:
[[code]]
DIRECCION, DISTANCIA [m]:
ARR 5.1
ABA 3.2
DER 7
IZQ 2.2
DERE 2.3
>>> Error comando "DERE" no reconocido

IZQ 3.2
ABA 8.1
ABA 823ad
>>> Error se esperaba un número; se recibió la expresión no reconocida "823ad".

IZQ 2
*FIN*
[[code]]
Determine la distancia al punto (0,0) y la posición (X,Y) actual del robot.

prob_04.py:
Escriba un programa que contabilice la frecuencia de las palabras en un texto. Por ejemplo si la cadena entrada es:
"Indeciso entre Python 2 y Python 3? Te recomiendo que uses Python 3 (ya que Python 2 dejará de ser soportado en el año 2020)"
entre
[[code]]
PALABRA    VECES
2          2
2020       1
3          2
Indeciso   1
Python     4
Te         1
año        1
de         1
dejará     1
el         1
en         1
entre      1
que        2
recomiendo 1
ser        1
soportado  1
uses       1
y          1
ya         1
[[code]]
Nota: para la impresión de tablas, utilizar el comando print() y sus modificadores % o .format() -- ver diapositivas "09 - Entrada y salida en Python 3". No usar PANDAS y otra librería para la impresión de tablas.
Nota: en este programa las palabras 'Hola' y 'hola' no se consideran iguales.


prob_05.py:
Escriba un programa que pregunte una frase y calcule el número de dígitos, de letras, de espacios y de signos varios. Por ejemplo
"Hola a tod@s! Hoy es 18 de Octubre de 2017"
LETRAS  = 25
DIGITOS = 6
SIGNOS  = 2
ESPACIOS = 9
MAYUSCULAS = 3
MINUSCULAS = 22


prob_06.py:
Sin utilizar funciones o métodos de cadenas, escriba un programa que pregunte dos dígitos "a" y "n" y calcule la suma:
a + aa + aaa + ... + aaaaaaaaaaaa (en esta última 'a' se repite 'n' veces)
Por ejemplo si a=9 y n=5 el programa debe imprimir:
9 + 99 + 999 + 9999 + 99999 = 111105
Observe que a pude tomar los valores 0, 1, 2, ..., 9 y n debe ser un número entero no negativo.
Nota: se pueden utilizar cadenas para imprimir, pero no para calcular el resultado


prob_07.py:
Dadas dos listas escriba un programa que encuentre aquellos elementos de su intersección (sin utilizar los comandos de conjuntos (set) de python). Por ejemplo si
A = [1,'Hola',3,6,'xxx',78,35,55] y B = [12,'xyz',24,35,24,88,120,155,'Hola']
Su intersección es: ['Hola', 35]

​A =['hola','hola','hola'] y B =['hola','hola','hola'] 
Su intersección es: ['hola']

​A = ['hola','hola', 25] y B = ['hola',30] 
Su intersección es: ['hola']

prob_08.py:
Haga un programa que solicite las coordenadas (x1,y1), (x2,y2) y (x3,y3) de un triángulo y determine si el punto (0,0) pertenece a dicho triángulo o no.

prob_09: (investigar)
Escriba un programa que lea una tabla como:
[[code]]
NOMBRE  EDAD  PUNTAJE
Jairo    19     98
Jairo    21     18
Jairo    21     99
Juan     18     80
Pedro    17     86
[[code]]
y la escriba en un archivo de texto con formato .CSV (ver: https://es.wikipedia.org/wiki/Valores_separados_por_comas). No usar librerías especiales como PANDAS o NUMPY. Abra el archivo desde MS EXCEL.
Nota: para la impresión de tablas, utilizar el comando print() y sus modificadores % o .format() -- ver diapositivas "09 - Entrada y salida en Python 3". No usar PANDAS y otra librería para la impresión de tablas.
Nota: la tabla la podría ingresar así:
Entre el número de personas = 10

Entre el nombre de la persona 1: JAIRO
Entre la edad de la persona 1: 19
Entre el puntaje de la persona 1: 98

Entre el nombre de la persona 2: jairo
Entre la edad de la persona 2: 21

etc ...

Observe que el programa organizó el nombre y puso la primera en mayúscula y el resto de letras en minúsculas. Esto se puede organizar con str.title()




prob_10.py: (investigar)
Haga un programa que lea del disco un archivo de texto y cuente el número de caracteres, palabras y líneas que existen dentro de este.
NOTA: para mayor facilidad, usted podría considerar los números como caracteres/palabras, es decir:
'Hoy es 27 de Octubre de 2017' tiene 7 palabras y 28 letras
La interfase de este programa podría ser (usted puede crear una diferente):
Entre el nombre del archivo: texto.txt
El archivo texto.txt tiene:
LINEAS = 1
PALABRAS = 7
CARACTERES = 28 (observe que aquí se están incluyendo también los espacios

prob_11.py:
Escriba un programa que pregunte un número entero no negativo n e imprima el resultado de (x+y)^n. Por ejemplo si n =3, el programa imprime:
[[code]]
     3    3     2       2   3  
(x+y)  = x  + 3x y + 3xy + y
[[code]]
Ver. https://es.wikipedia.org/wiki/Teorema_del_binomio
NOTA: no usar la librería sympy.

prob_12.py:
Teniendo en cuenta que el 1 de enero de 2017 fue un domingo, escriba un programa que pregunte una fecha del año 2017 y escriba el día correspondiente. Por ejemplo 
MES = 10
DIA = 18
El programa determinará que el 18 de octubre de 2017 es un miércoles.

prob_13.py:
Escriba un programa que lea una secuencia de números enteros entre 1 y 5 y grafique su histograma en modo texto, algo así como:
[[code]]
Histograma:
14             5|=====================
33             4|==================================================
20             3|==============================
12             2|==================
 5             1|=======
                +--------------+--------------+--------------+--------------+
                0             10             20             30             40
[[code]]
Notas:
* la barra más larga del histograma debe tener 50 =s 
* el usuario determinará que tan larga es la secuencia de números entrados.


prob_14.py:
Escriba un programa que dada una lista imprima el producto de la multiplicación de los números en la lista, excepto el número en la posición i. Por ejemplo dado [1, 2, 3, 4], el programa debe imprimir [24, 12, 8, 6]. En caso que se ingrese un único número, el programa debe avisar que el cálculo no es posible.

prob_15.py:
Escriba un programa que acepte 18 números enteros diferentes entre 1 y 20. El programa debe detectar cuales fueron los dos números entre 1 y 20 que no se ingresaron. Nota: no se pueden usar funciones de conjuntos de python.


**Parte 4 -- opcional para los que quieran mejorar su nota y obligatorio para los que quieran volver a repetir la sustentación (12 ejercicios)**

prob_01.py
Hacer un programa que pregunte dos horas (en el formato militar HH:MM). Si ambas son iguales, reportarlo, de lo contrario, mostrar su diferencia en minutos. No usar librerías especializadas en el manejo de fechas/horas (datetime, etc). Tenga en cuenta que las horas están entre las 00:00 y las 23:59.
[[code]]
>> Entre la hora 1: 13:44
>> Entre la hora 2:  9:50
La diferencia en tiempo entre ambas horas es 234 minutos.
[[code]]

No importa el orden de entrada:
[[code]]
>> Entre la hora 1:  9:50
>> Entre la hora 2: 13:44
La diferencia en tiempo entre ambas horas es 234 minutos.
[[code]]

prob_02.py
Hacer un programa que solicite al usuario una matriz cuadrada NxN. Verificar mediante una función recursiva si esta es una matriz identidad y mostrar el resultado. La matriz puede ser de enteros o de flotantes.

prob_03.py
Preguntar al usuario una dirección de correo electrónico. Verificar que dicho correo está bien escrito y verificar si dicho correo es uno válido de la Universidad Nacional (@unal.edu.co)
REGLAS: nombre@dominio
El nombre debe seguir las siguientes reglas:
Letras A..Z y a..z (sin tildes ni ñ)
Dígitos 0..9Con
Solo puede existir un @
Caracteres especiales -. (ninguno de los dos puede ser el primero, ni el último ni pueden estar repetidos inmediatamente)
pepito.perez@unal.edu.co y pepito-perez@unal.edu.co son correos válidos
pepito..perez@unal.edu.co y pepito--perez@unal.edu.co son correos inválidos
-pepitoperez@unal.edu.co y pepitoperez.@unal.edu.co son correos inválidos

prob_04.py
Sin utilizar el + o el - ni sino la función 
[[code  format="python"]]
def sumar_digitos(a,b,base=10):
    if a<0 or b<0 or a>(base-1) or b>(base-1):
        raise ValueError('Los digitos deben ser enteros positivos entre 0 y {0}'.format(base-1))    
    suma = a+b
    lleva = False
    if a+b > (base-1):
        suma = a + b - base
        lleva = True
    return suma, lleva
[[code]]
NOTA: esta función no se puede modificar
    
haga una función que sume dos números enteros positivos que el usuario ingrese, tal y como le enseñaron en primero de primaria. Los números entrados pueden estar en cualquier base entre el 2 y el 10. Pregunte al usuario la base en la que va a entrar ambos números.
Ejemplo:
[[code]]
​Entre la base (entre 2 y 10): 7
Entre el primer número: 3452326
Entre el segundo número: 53245
La suma de ambos números es: 3535604
[[code]]

prob_05.py
Similar la punto 4, pero esta vez implementar la función resta tal y como le enseñaron en segundo de primaria. Los números entrados pueden estar en cualquier base entre el 2 y el 10. Pregunte al usuario la base en la que va a entrar ambos números. El primer número será mayor que el segundo número.
Usar las funciones:
[[code format="python"]]
def restar_digitos(a,b, base=10):
    if a<0 or b<0 or a>(base-1) or b>(base-1):
        raise ValueError('Los digitos deben ser enteros positivos entre 0 y {0}'.format(base-1))    
    resta = a-b
    pedir_prestado = False
    if a-b < 0:
        resta = a - b + base
        pedir_prestado = True
    return resta, pedir_prestado

def sumar_base(a, base=10):
    return a + base
[[code]]
NOTA: estas funciones no se pueden modificar
Ejemplo:
[[code]]
​Entre la base (entre 2 y 10): 7
Entre el primer número: 3452326
Entre el segundo número: 53245
La diferencia entre ambos números es: 3366051
[[code]]

prob_06.py
Escriba un programa que pregunte una cadena y encuentre la subcadena palíndroma más grande que esté dentro de la cadena entrada.
Por ejemplo en:
[[code]]
Había una vez un oso llamado Pepe
[[code]]
la cadena palíndroma más grande es " oso " (espacio oso espacio)
